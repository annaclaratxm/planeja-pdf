generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DIRECT_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String         @id @default(cuid())
  name                     String?
  email                    String?        @unique
  emailVerified            DateTime?
  image                    String?
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?
  accounts                 Account[]
  budgets                  Budget[]
  customers                Customer[]
  sessions                 Session[]
  settings                 Settings?
  subscriptions            Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Settings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  companyName        String
  cnpj               String
  street             String
  number             Int
  zipCode            String
  state              String
  city               String
  phone              String
  responsiblePerson  String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  logo               String?
  budgetValidityDays Int?
  deliveryTimeDays   Int?
  observation        String?
  paymentMethod      String?
  neighborhood       String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  phone     String
  email     String?
  birthdate DateTime?
  userId    String
  address   String?
  cnpj      String?
  cpf       String?
  budget    Budget[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Budget {
  id           String       @id @default(cuid())
  name         String
  status       StatusBudget
  customerId   String?
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  shippingDate DateTime?
  validateDate DateTime?
  total        Float
  customer     Customer?    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories   Category[]
}

model Category {
  id       String    @id @default(cuid())
  name     String
  budgetId String
  Budget   Budget    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  products Product[]
}

model Product {
  id         String   @id @default(cuid())
  name       String
  price      Float
  categoryId String
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Plan {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  price         Float
  interval      Interval
  stripePriceId String         @unique
  subscriptions Subscription[]
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  planId               String
  stripeSubscriptionId String?            @unique
  status               SubscriptionStatus
  startDate            DateTime
  endDate              DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  payments             Payment[]
  plan                 Plan               @relation(fields: [planId], references: [id], onDelete: Cascade)
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String        @id @default(cuid())
  subscriptionId  String
  amount          Float
  paymentDate     DateTime
  status          PaymentStatus
  stripePaymentId String?       @unique
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

enum StatusBudget {
  Pendente
  Enviado
  Aceito
  Negado
}

enum Interval {
  Mensal
  Anual
}

enum SubscriptionStatus {
  Active
  PastDue
  Canceled
  Incomplete
  IncompleteExpired
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}
