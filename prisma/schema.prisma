generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DIRECT_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?

  accounts  Account[]
  sessions  Session[]
  customers Customer[]
  budgets   Budget[]
  setting   Settings[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Settings {
  id                String   @id @default(cuid())
  userId            String   @unique
  companyName       String
  cnpj              String
  street            String
  number            Int
  zipCode           String
  state             String
  city              String
  phone             String
  responsiblePerson String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  phone     String
  email     String?
  cpf       String?
  cnpj      String?
  address   String?
  birthdate DateTime?
  userId    String

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  budget Budget[]
}

model Budget {
  id           String       @id @default(cuid())
  name         String
  status       StatusBudget
  customerId   String?
  userId       String
  shippingDate DateTime?
  validateDate DateTime?
  total        Float
  categories   Category[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  customer     Customer?    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id       String    @id @default(cuid())
  name     String
  budgetId String
  products Product[]
  Budget   Budget    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
}

model Product {
  id         String   @id @default(cuid())
  name       String
  price      Float
  categoryId String
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

enum StatusBudget {
  Pendente
  Enviado
  Aceito
  Negado
}
